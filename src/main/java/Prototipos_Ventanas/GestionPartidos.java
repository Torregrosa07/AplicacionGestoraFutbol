/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Prototipos_Ventanas;

import ConexionesBD.ConexionBDR;
import Modelos.Equipo;
import Modelos.Partido;
import static Prototipos_Ventanas.GestionInicio.fecha;
import controladores.controladorPartido;
import com.toedter.calendar.JDateChooser;
import java.awt.FlowLayout;
import java.awt.List;
import java.awt.TextField;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author keiny
 */
public class GestionPartidos extends javax.swing.JPanel {

    private DefaultTableModel modeloPartidos;
    private DefaultTableModel modeloEstadisticas;
    private controladorPartido controlador;
    private Object[][] matrizDatos;
    private String[] columnas = {"ID", "Fecha", "Hora", "Equipo Local", "Equipo Visitante"};

    public GestionPartidos() {
        //modeloPartidos = new DefaultTableModel(new String columnas []{"ID", "Fecha", "Hora", "Equipo Local", "Equipo Visitante"}, 0);
        modeloEstadisticas = new DefaultTableModel(new String[]{"Fecha", "GF", "GC", "PG", "PP", "PE", "Puntos"}, 0);
        controlador = new controladorPartido();

        initComponents();

        // Configurar tablas
        tablaPartidos.setModel(controlador.cargarPartidos());
        System.out.println("Filas en tablaPartidos al inicializar: " + tablaPartidos.getRowCount());

        DefaultTableModel modeloEstadisticas = controlador.cargarEstadisticas();
        //modeloEstadisticas = controlador.ordenarEstadisticasPorPuntos(modeloEstadisticas);
        tablaEstadisticas.setModel(modeloEstadisticas);
        controlador.cargarEquiposEnCombos(comboEquipoLocal, comboEquipoVisitante);

        tablaPartidos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tablaPartidos.getSelectedRow();
                    if (selectedRow != -1) {
                        String equipoLocal = (String) tablaPartidos.getModel().getValueAt(selectedRow, 3);
                        String equipoVisitante = (String) tablaPartidos.getModel().getValueAt(selectedRow, 4);

                        equipoLocalCampoTxt.setText(equipoLocal);
                        equipoVisitanteCampoTxt.setText(equipoVisitante);
                    } else {
                        equipoLocalCampoTxt.setText("");
                        equipoVisitanteCampoTxt.setText("");
                    }
                }
            }
        });
    }

    private void actualizarTabla() {
        try {

            matrizDatos = controlador.convertirAMatrizObject();

            modeloPartidos = new DefaultTableModel(matrizDatos, columnas) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Impedir edición de celdas
                }
            };

            tablaPartidos.setModel(modeloPartidos);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "Error al actualizar la tabla: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        guargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPartidos = new javax.swing.JTable();
        hora = new javax.swing.JLabel();
        hora2 = new java.awt.TextField();
        gf = new java.awt.TextField();
        gc = new java.awt.TextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEstadisticas = new javax.swing.JTable();
        publicar = new javax.swing.JButton();
        dateChooserFecha = new com.toedter.calendar.JDateChooser();
        comboEquipoLocal = new javax.swing.JComboBox<>();
        comboEquipoVisitante = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        eliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buscarEquipoPorID = new javax.swing.JButton();
        idPartido = new javax.swing.JTextField();
        equipoLocalCampoTxt = new javax.swing.JTextField();
        equipoVisitanteCampoTxt = new javax.swing.JTextField();
        cargarDeFicheroXML = new javax.swing.JButton();
        exportarAXML = new javax.swing.JButton();
        importarDeBinario = new javax.swing.JButton();
        exportarABinario = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 102, 102));
        setPreferredSize(new java.awt.Dimension(1155, 581));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setText("Fecha:");

        guargar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        guargar.setText("Añadir");
        guargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guargarActionPerformed(evt);
            }
        });

        tablaPartidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaPartidos);

        hora.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        hora.setText("Hora:");

        hora2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hora2ActionPerformed(evt);
            }
        });

        gf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gfActionPerformed(evt);
            }
        });

        gc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gcActionPerformed(evt);
            }
        });

        tablaEstadisticas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaEstadisticas);

        publicar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        publicar.setText("Registrar Estadistícas");
        publicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setText("Equipo Local:");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        jLabel3.setText("PUBLICAR UN PARTIDO");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        jLabel4.setText("PUBLICAR ESTADISTICAS");

        eliminar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel5.setText("Equipo Visitante:");

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel6.setText("Buscar Partido Por ID:");

        buscarEquipoPorID.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        buscarEquipoPorID.setText("Buscar");
        buscarEquipoPorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarEquipoPorIDActionPerformed(evt);
            }
        });

        cargarDeFicheroXML.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        cargarDeFicheroXML.setText("Importar de XML");
        cargarDeFicheroXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarDeFicheroXMLActionPerformed(evt);
            }
        });

        exportarAXML.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        exportarAXML.setText("Exportar a XML");
        exportarAXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarAXMLActionPerformed(evt);
            }
        });

        importarDeBinario.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        importarDeBinario.setText("Importar de Binario");

        exportarABinario.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        exportarABinario.setText("Exportar a Binario");
        exportarABinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarABinarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(hora2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dateChooserFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(72, 72, 72))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(idPartido, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guargar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarEquipoPorID, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cargarDeFicheroXML)
                                .addGap(18, 18, 18)
                                .addComponent(exportarAXML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(equipoVisitanteCampoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gc, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(equipoLocalCampoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(gf, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(publicar)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(importarDeBinario)
                                .addGap(18, 18, 18)
                                .addComponent(exportarABinario, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 68, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateChooserFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(guargar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hora, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                    .addComponent(hora2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buscarEquipoPorID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idPartido, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportarABinario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importarDeBinario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportarAXML, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarDeFicheroXML, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(equipoLocalCampoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(equipoVisitanteCampoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(publicar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guargarActionPerformed
        String equipoLocal = comboEquipoLocal.getSelectedItem() != null ? comboEquipoLocal.getSelectedItem().toString() : null;
        String equipoVisitante = comboEquipoVisitante.getSelectedItem() != null ? comboEquipoVisitante.getSelectedItem().toString() : null;
        controlador.guardarPartido2(dateChooserFecha, hora2, equipoLocal, equipoVisitante, modeloPartidos);
        controlador.limpiarCampos(dateChooserFecha, hora2, comboEquipoLocal, comboEquipoVisitante);
        actualizarTabla();
    }//GEN-LAST:event_guargarActionPerformed

    private void hora2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hora2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hora2ActionPerformed

    private void gfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gfActionPerformed

    private void gcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gcActionPerformed

    private void publicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicarActionPerformed
        try {
            int selectedRow = tablaPartidos.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un partido de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idPartido = (int) tablaPartidos.getModel().getValueAt(selectedRow, 0);

            String golesLocalStr = gf.getText().trim();
            String golesVisitanteStr = gc.getText().trim();
            if (golesLocalStr.isEmpty() || golesVisitanteStr.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese los goles de ambos equipos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            boolean exito = controlador.registrarResultado(idPartido, golesLocalStr, golesVisitanteStr);
            if (exito) {
                tablaEstadisticas.setModel(controlador.cargarEstadisticas()); // se actualiza la tabla de estadísticas
                tablaPartidos.setModel(controlador.cargarPartidos()); // y la de partidos
                gf.setText(""); //  se limpia el campo de goles local
                gc.setText(""); // se limpia el campo de goles visitante
                equipoLocalCampoTxt.setText(""); // se limpia el nombre del equipo local
                equipoVisitanteCampoTxt.setText(""); // se limpia el nombre del equipo visitante
                JOptionPane.showMessageDialog(null, "Resultado registrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo registrar el resultado. Revisa los datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al registrar resultado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_publicarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed

        try {
            int selectedRow = tablaPartidos.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un partido de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int idPartido = (int) tablaPartidos.getModel().getValueAt(selectedRow, 0);
            controlador.eliminarPartido(idPartido);

            tablaPartidos.setModel(controlador.cargarPartidos());
            //tablaEstadisticas.setModel(controlador.cargarEstadisticas());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_eliminarActionPerformed

    private void buscarEquipoPorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarEquipoPorIDActionPerformed
        String idBuscarStr = idPartido.getText().trim();

        if (idBuscarStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingresa el ID del partido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idBuscar;
        try {
            idBuscar = Integer.parseInt(idBuscarStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
            idPartido.setText("");
            return;
        }

        controladorPartido controlador = new controladorPartido();
        Partido partido = controlador.buscarPartidoPorId(idBuscar);

        if (partido != null) {
            idPartido.setText(String.valueOf(partido.getIdPartido()));

            dateChooserFecha.setDate(partido.getFechaPartido());
            String hora = new SimpleDateFormat("HH:mm").format(partido.getFechaPartido());
            hora2.setText(hora);

            comboEquipoLocal.setSelectedItem(partido.getEquipoLocal().getNombre());
            comboEquipoVisitante.setSelectedItem(partido.getEquipoVisitante().getNombre());

            gf.setText(partido.getGolesLocal() >= 0 ? String.valueOf(partido.getGolesLocal()) : "");   // goles (si son -1, significa que no hay resultado)
            gc.setText(partido.getGolesVisitante() >= 0 ? String.valueOf(partido.getGolesVisitante()) : "");

            JOptionPane.showMessageDialog(this, "Partido encontrado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el partido con ID: " + idBuscar, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarEquipoPorIDActionPerformed

    private void cargarDeFicheroXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarDeFicheroXMLActionPerformed
        try {
            int cargados = controlador.importarPartidosDesdeXML((DefaultTableModel) tablaPartidos.getModel());
            JOptionPane.showMessageDialog(this, "Se cargaron lospartidos con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Archivo partidOs.xml no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_cargarDeFicheroXMLActionPerformed

    private void exportarAXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarAXMLActionPerformed
        try {
            // se obtiene el modelo actual de la tabla
            DefaultTableModel modeloActual = (DefaultTableModel) tablaPartidos.getModel();

            // y se verifica si hay datos en la tabla
            int rowCount = modeloActual.getRowCount();
            System.out.println("Filas en modeloActual (tablaPartidos.getModel()): " + rowCount);

            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "No hay partidos en la tabla para exportar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // se convierten los datos de la tabla a una lista
            ArrayList<Object[]> lista = pasarTablaALista(modeloActual);
            System.out.println("Número de filas exportadas: " + lista.size());

            // y procede a guardarse la lista en un archivo XML
            FileOutputStream fos = new FileOutputStream("partidOs.xml");
            XMLEncoder encoder = new XMLEncoder(new BufferedOutputStream(fos));
            encoder.writeObject(lista);
            encoder.close();

            JOptionPane.showMessageDialog(this, "Partidos exportados a XML correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al exportar XML: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportarAXMLActionPerformed

    private void exportarABinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarABinarioActionPerformed
        try {
            // se obteniene el modelo actual de la tabla
            DefaultTableModel modeloActual = (DefaultTableModel) tablaPartidos.getModel();

            // se verifica si hay datos en la tabla
            int rowCount = modeloActual.getRowCount();
            System.out.println("Filas en modeloActual (tablaPartidos.getModel()): " + rowCount);

            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "No hay Equipos en la tabla para exportar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // se convierten los datos de la tabla a una lista
            ArrayList<Object[]> lista = pasarTablaALista(modeloActual);
            System.out.println("Número de filas exportadas: " + lista.size());

            // y guarda la lista en un archivo binario
            FileOutputStream fos = new FileOutputStream("equipos.bin");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(lista);
            oos.close();

            JOptionPane.showMessageDialog(this, "Equipos exportados a BINARIO correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al exportar BINARIO: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportarABinarioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarEquipoPorID;
    private javax.swing.JButton cargarDeFicheroXML;
    private javax.swing.JComboBox<String> comboEquipoLocal;
    private javax.swing.JComboBox<String> comboEquipoVisitante;
    private com.toedter.calendar.JDateChooser dateChooserFecha;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField equipoLocalCampoTxt;
    private javax.swing.JTextField equipoVisitanteCampoTxt;
    private javax.swing.JButton exportarABinario;
    private javax.swing.JButton exportarAXML;
    private java.awt.TextField gc;
    private java.awt.TextField gf;
    private javax.swing.JButton guargar;
    private javax.swing.JLabel hora;
    private java.awt.TextField hora2;
    private javax.swing.JTextField idPartido;
    private javax.swing.JButton importarDeBinario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton publicar;
    private javax.swing.JTable tablaEstadisticas;
    private javax.swing.JTable tablaPartidos;
    // End of variables declaration//GEN-END:variables

    /**
     * MÉTODO PARA PASAR LA TABLA A LISTA
     *
     * @param modelo
     * @return
     */
    private ArrayList<Object[]> pasarTablaALista(DefaultTableModel modelo) {
        ArrayList<Object[]> lista = new ArrayList<>();
        int filas = modelo.getRowCount();
        int columnas = modelo.getColumnCount();

        for (int i = 0; i < filas; i++) {
            Object[] fila = new Object[columnas];
            for (int j = 0; j < columnas; j++) {
                fila[j] = modelo.getValueAt(i, j);
            }
            lista.add(fila);
        }
        return lista;
    }

    /**
     * MÉTODO PARA PASAR LISTA A TABLA
     *
     * @param lista
     * @param columnas
     * @return
     */
    private DefaultTableModel pasarListaATabla(ArrayList<Object[]> lista, String[] columnas) {
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        for (Object[] fila : lista) {
            modelo.addRow(fila);
        }
        return modelo;
    }
}
