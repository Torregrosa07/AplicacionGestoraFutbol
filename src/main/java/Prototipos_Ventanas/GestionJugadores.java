/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Prototipos_Ventanas;

import ConexionesBD.ConexionBDR;
import Modelos.Equipo;
import Modelos.Jugador;
import controladores.controladorJugadores;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.XmlExporter;

/**
 *
 * @author Santiago
 */
public class GestionJugadores extends javax.swing.JPanel {

    private controladores.controladorJugadores controladorJugadores = new controladores.controladorJugadores();
    private Object[][] matrizDatos;
    private DefaultTableModel dtm;
    private String[] columnas = {"ID", "NOMBRE", "APELLIDOS", "POSICION", "DORSAL", "EQUIPO", "EDAD", "SEXO"};

    private void modificarJugador(int idJugador, String nombre, String apellidos, String dorsal,
            String posicion, String sexo, int edad, Integer idEquipo) {
        controladores.controladorJugadores controlador = new controladores.controladorJugadores();
        controlador.modificarJugador(idJugador, nombre, apellidos, dorsal, posicion, sexo, edad, idEquipo);
    }

    /**
     * Creates new form GestionJugadores
     *
     * @throws java.lang.ClassNotFoundException
     */
    public GestionJugadores() {
        try {
            initComponents();
            jComboPosicion.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboPosicionActionPerformed(evt);
                }
            });
            TDatos.getSelectionModel().addListSelectionListener(e -> mostrarDatosJugadorSeleccionado());

            controladorJugadores.mostrarEquiposCombo(jComboEquipo);
            controladorJugadores.MostrarSexoCombo(jComboSexo);
            controladorJugadores.MostrarPosicionCombo(jComboPosicion);

            actualizarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(GestionJugadores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void actualizarTabla() throws SQLException {
        matrizDatos = controladorJugadores.convertirAMatrizObject();
        dtm = new DefaultTableModel(matrizDatos, columnas) {
            //para impedir edición de las celdas
            @Override
            public boolean isCellEditable(int fila, int columna) {
                return false;
            }
        };
        TDatos.setModel(dtm);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TDatos = new javax.swing.JTable();
        labelNombre = new javax.swing.JLabel();
        labelApellidos = new javax.swing.JLabel();
        labelDorsal = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new java.awt.TextField();
        txtApellidos = new java.awt.TextField();
        txtDorsal = new java.awt.TextField();
        btnAnadir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        labelEquipo = new javax.swing.JLabel();
        jComboEquipo = new javax.swing.JComboBox<>();
        labelSexo = new javax.swing.JLabel();
        jComboSexo = new javax.swing.JComboBox<>();
        jComboPosicion = new javax.swing.JComboBox<>();
        txtEdad = new javax.swing.JTextField();
        labelEdad = new javax.swing.JLabel();
        btnExportarAXml = new javax.swing.JButton();
        btnLimpiarCampos = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        TDatos.setBackground(new java.awt.Color(204, 204, 204));
        TDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "APELLIDOS", "POSICIÓN", "DORSAL", "EQUIPO", "EDAD", "SEXO"
            }
        ));
        jScrollPane1.setViewportView(TDatos);
        if (TDatos.getColumnModel().getColumnCount() > 0) {
            TDatos.getColumnModel().getColumn(7).setResizable(false);
        }

        labelNombre.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelNombre.setText("Nombre:");

        labelApellidos.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelApellidos.setText("Apellidos:");

        labelDorsal.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelDorsal.setText("Dorsal:");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Posición:");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtApellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidosActionPerformed(evt);
            }
        });

        txtDorsal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDorsalActionPerformed(evt);
            }
        });

        btnAnadir.setBackground(new java.awt.Color(102, 255, 102));
        btnAnadir.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnAnadir.setText("Añadir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(255, 255, 102));
        btnModificar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 51, 51));
        btnEliminar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(51, 153, 255));
        btnBuscar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        labelEquipo.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelEquipo.setText("Equipo:");

        jComboEquipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin Equipo" }));
        jComboEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboEquipoActionPerformed(evt);
            }
        });

        labelSexo.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelSexo.setText("Sexo:");

        jComboSexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboSexoActionPerformed(evt);
            }
        });

        jComboPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboPosicionActionPerformed(evt);
            }
        });

        labelEdad.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        labelEdad.setText("Edad:");

        btnExportarAXml.setBackground(new java.awt.Color(255, 153, 0));
        btnExportarAXml.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnExportarAXml.setText("Exportar a XML");
        btnExportarAXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarAXmlActionPerformed(evt);
            }
        });

        btnLimpiarCampos.setBackground(new java.awt.Color(255, 102, 102));
        btnLimpiarCampos.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnLimpiarCampos.setText("LIMPIAR CAMPOS");
        btnLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(btnExportarAXml, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelEquipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(labelApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(labelDorsal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(labelEdad)))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtEdad)
                                        .addGap(18, 18, 18)
                                        .addComponent(labelSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboSexo, 0, 101, Short.MAX_VALUE)
                                    .addComponent(jComboPosicion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(btnLimpiarCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboPosicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEdad))
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarCampos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnExportarAXml, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtApellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidosActionPerformed

    private void txtDorsalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDorsalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDorsalActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed

        String nombre = txtNombre.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String dorsal = txtDorsal.getText().trim();
        String posicion = (String) jComboPosicion.getSelectedItem();
        String sexo = (String) jComboSexo.getSelectedItem();
        String edadTexto = txtEdad.getText().trim();

        // Validación de campos vacíos
        if (nombre.isEmpty() || apellidos.isEmpty() || dorsal.isEmpty()
                || posicion == null || sexo == null || edadTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar edad numérica
        int edad;
        try {
            edad = Integer.parseInt(edadTexto);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "La edad debe ser un número válido.", "Error en el campo edad", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener ID del equipo
        Integer idEquipo = null;
        String equipoSeleccionado = (String) jComboEquipo.getSelectedItem();

        if (!"Sin equipo".equals(equipoSeleccionado)) {
            controladores.controladorEquipos ctrlEquipos = new controladores.controladorEquipos();
            Equipo equipo = ctrlEquipos.buscarEquipoPorNombre(equipoSeleccionado);
            if (equipo != null) {
                idEquipo = equipo.getIDEquipo();
            }
        }

        // Paso 1: Verificar duplicados en la interfaz
        Jugador jugadorExistente = controladorJugadores.buscarJugadorPorNombreApellidos(nombre, apellidos);
        if (jugadorExistente != null) {
            JOptionPane.showMessageDialog(this, "El jugador '" + nombre + " " + apellidos + "' ya existe.",
                    "Jugador duplicado", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Paso 2: Insertar en BD (manejar error de BD si falla)
        try {
            controladorJugadores.anadirJugador(nombre, apellidos, dorsal, posicion, sexo, edad, idEquipo);
            JOptionPane.showMessageDialog(this, "Jugador añadido correctamente.");
            actualizarTabla();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al añadir jugador: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        int filaSeleccionada = TDatos.getSelectedRow();

        if (filaSeleccionada < 0) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un jugador para eliminar.", "No se seleccionó nada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Obtener el id del Jugador
        int idJugador;
        try {
            idJugador = Integer.parseInt(TDatos.getValueAt(filaSeleccionada, 0).toString());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del jugador.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el nombre del jugador 
        String nombreJugador = TDatos.getValueAt(filaSeleccionada, 1).toString();

        // Confirmación antes de eliminar
        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de eliminar al jugador \"" + nombreJugador + "\" con ID " + idJugador + "?", "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            controladores.controladorJugadores controlador = new controladores.controladorJugadores();
            controlador.eliminarJugador(idJugador);

            // Actualizar la tabla despues de eliminar
            try {
                actualizarTabla();
            } catch (SQLException ex) {
                Logger.getLogger(GestionJugadores.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String nombre = txtNombre.getText().trim();
        String apellidos = txtApellidos.getText().trim();

        if (nombre.isEmpty() || apellidos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce nombre y apellidos para realizar la búsqueda.",
                    "Datos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        controladorJugadores controlador = new controladorJugadores();
        Jugador jugadorEncontrado = controlador.buscarJugadorPorNombreApellidos(nombre, apellidos);

        if (jugadorEncontrado != null) {
            // Llenar los campos con los datos del jugador encontrado
            txtNombre.setText(jugadorEncontrado.getNombre());
            txtApellidos.setText(jugadorEncontrado.getApellidos());
            txtDorsal.setText(jugadorEncontrado.getDorsal());

            // Seleccionar posición en el combo box
            if (jugadorEncontrado.getPosicion() != null) {
                jComboPosicion.setSelectedItem(jugadorEncontrado.getPosicion().toString());
            }

            // Seleccionar sexo en el combo box
            if (jugadorEncontrado.getSexo() != null) {
                jComboSexo.setSelectedItem(jugadorEncontrado.getSexo().toString());
            }

            // Establecer edad
            txtEdad.setText(String.valueOf(jugadorEncontrado.getEdad()));

            // Seleccionar equipo en el combo box si existe
            if (jugadorEncontrado.getEquipo() != null) {
                jComboEquipo.setSelectedItem(jugadorEncontrado.getEquipo().getNombre());
            } else {
                jComboEquipo.setSelectedItem("Sin equipo");
            }

            // Resaltar la fila en la tabla
            for (int i = 0; i < TDatos.getRowCount(); i++) {
                // Asumiendo que el ID está en la primera columna
                if (TDatos.getValueAt(i, 0).toString().equals(String.valueOf(jugadorEncontrado.getIDjugador()))) {
                    TDatos.setRowSelectionInterval(i, i);
                    TDatos.scrollRectToVisible(TDatos.getCellRect(i, 0, true));
                    break;
                }
            }

            JOptionPane.showMessageDialog(this, "Jugador encontrado correctamente.",
                    "Búsqueda exitosa", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró ningún jugador con el nombre y apellidos proporcionados.",
                    "Búsqueda sin resultados", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jComboEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboEquipoActionPerformed
        /*String equipoSeleccionado = (String) jComboEquipo.getSelectedItem();

        try {
            if (equipoSeleccionado != null && !"Sin equipo".equals(equipoSeleccionado)) {
                // Buscar el equipo por nombre
                controladores.controladorEquipos ctrlEquipos = new controladores.controladorEquipos();
                Equipo equipo = ctrlEquipos.buscarEquipoPorNombre(equipoSeleccionado);

                if (equipo != null) {
                    // Obtener jugadores de ese equipo
                    Object[][] jugadoresPorEquipo = controladorJugadores.convertirAMatrizObjectPorEquipo(equipo.getIDEquipo());

                    // Actualizar modelo de la tabla
                    dtm = new DefaultTableModel(jugadoresPorEquipo, columnas) {
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }
                    };
                    TDatos.setModel(dtm);
                }
            } else {
                // Mostrar todos los jugadores si se elige "Sin equipo"
                actualizarTabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al filtrar jugadores: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }*/
    }//GEN-LAST:event_jComboEquipoActionPerformed

    private void jComboSexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboSexoActionPerformed

    }//GEN-LAST:event_jComboSexoActionPerformed

    private void btnExportarAXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarAXmlActionPerformed
        XmlExporter exporter = new XmlExporter();
        try {
            exporter.exportarEquiposYJugadoresAXml("equipos_y_jugadores.xml");
            JOptionPane.showMessageDialog(this, "Exportación a XML exitosa!", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Error al exportar a XML: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnExportarAXmlActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // Verificar que se haya seleccionado una fila en la tabla
        int filaSeleccionada = TDatos.getSelectedRow();

        if (filaSeleccionada < 0) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un jugador para modificar.",
                    "No se seleccionó ningún jugador", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener el ID del jugador seleccionado
        int idJugador;
        try {
            idJugador = Integer.parseInt(TDatos.getValueAt(filaSeleccionada, 0).toString());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del jugador.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar todos los campos de entrada
        String nombre = txtNombre.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String dorsal = txtDorsal.getText().trim();
        String posicion = (String) jComboPosicion.getSelectedItem();
        String sexo = (String) jComboSexo.getSelectedItem();
        String edadTexto = txtEdad.getText().trim();

        // Validar que ningún campo esté vacío
        if (nombre.isEmpty() || apellidos.isEmpty() || dorsal.isEmpty()
                || posicion == null || sexo == null || edadTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.",
                    "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir edad a entero
        int edad;
        try {
            edad = Integer.parseInt(edadTexto);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "La edad debe ser un número válido.",
                    "Error en el campo edad", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el ID del equipo seleccionado
        String equipoSeleccionado = (String) jComboEquipo.getSelectedItem();
        Integer idEquipo = null;
        if (!"Sin equipo".equals(equipoSeleccionado)) {
            controladores.controladorEquipos ctrlEquipos = new controladores.controladorEquipos();
            Equipo equipo = ctrlEquipos.buscarEquipoPorNombre(equipoSeleccionado);
            if (equipo != null) {
                idEquipo = equipo.getIDEquipo();
            }
        }

        // Confirmar la modificación
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Modificar a " + nombre + " " + apellidos + "?\nID: " + idJugador, "Confirmar", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Llamar al método para modificar el jugador
            modificarJugador(idJugador, nombre, apellidos, dorsal, posicion, sexo, edad, idEquipo);

            try {
                actualizarTabla();
                JOptionPane.showMessageDialog(this, "Jugador modificado correctamente.");
            } catch (SQLException ex) {
                Logger.getLogger(GestionJugadores.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al actualizar la tabla: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void jComboPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboPosicionActionPerformed

       /* String posicionSeleccionada = (String) jComboPosicion.getSelectedItem();
        try {
            if (posicionSeleccionada != null && !posicionSeleccionada.isEmpty()) {
                Object[][] jugadoresPorPosicion = controladorJugadores.convertirAMatrizObjectPorPosicion(posicionSeleccionada);
                dtm = new DefaultTableModel(jugadoresPorPosicion, columnas) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                TDatos.setModel(dtm);
            } else {
                actualizarTabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al filtrar por posición: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }*/

    }//GEN-LAST:event_jComboPosicionActionPerformed

    private void btnLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCamposActionPerformed

        txtNombre.setText("");
        txtApellidos.setText("");
        txtDorsal.setText("");
        txtEdad.setText("");

        try {
            actualizarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(GestionJugadores.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnLimpiarCamposActionPerformed
    private void mostrarDatosJugadorSeleccionado() {
        int filaSeleccionada = TDatos.getSelectedRow();

        if (filaSeleccionada >= 0) {
            try {
                // Convertir valores a String de forma segura
                String nombre = String.valueOf(TDatos.getValueAt(filaSeleccionada, 1));
                String apellidos = String.valueOf(TDatos.getValueAt(filaSeleccionada, 2));
                String posicion = String.valueOf(TDatos.getValueAt(filaSeleccionada, 3));
                String dorsal = String.valueOf(TDatos.getValueAt(filaSeleccionada, 4));
                String equipo = String.valueOf(TDatos.getValueAt(filaSeleccionada, 5));
                String edad = String.valueOf(TDatos.getValueAt(filaSeleccionada, 6));
                String sexo = String.valueOf(TDatos.getValueAt(filaSeleccionada, 7));

                // Reemplazar "null" por cadena vacía 
                if (nombre.equals("null")) {
                    nombre = "";
                }
                if (apellidos.equals("null")) {
                    apellidos = "";
                }
                if (posicion.equals("null")) {
                    posicion = "";
                }
                if (dorsal.equals("null")) {
                    dorsal = "";
                }
                if (equipo.equals("null")) {
                    equipo = "";
                }
                if (edad.equals("null")) {
                    edad = "";
                }
                if (sexo.equals("null")) {
                    sexo = "";
                }

                // Llenar campos de texto
                txtNombre.setText(nombre);
                txtApellidos.setText(apellidos);
                txtDorsal.setText(dorsal);
                txtEdad.setText(edad);

                // Seleccionar posición y sexo en combos (solo si no están vacíos)
                if (!posicion.isEmpty()) {
                    jComboPosicion.setSelectedItem(posicion);
                }
                if (!sexo.isEmpty()) {
                    jComboSexo.setSelectedItem(sexo);
                }

                // Manejar equipo
                if (equipo.isEmpty()) {
                    jComboEquipo.setSelectedItem("Sin equipo");
                } else {
                    jComboEquipo.setSelectedItem(equipo);
                }

            } catch (Exception e) {
                System.err.println("Error al mostrar datos: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TDatos;
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExportarAXml;
    private javax.swing.JButton btnLimpiarCampos;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> jComboEquipo;
    private javax.swing.JComboBox<String> jComboPosicion;
    private javax.swing.JComboBox<String> jComboSexo;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelApellidos;
    private javax.swing.JLabel labelDorsal;
    private javax.swing.JLabel labelEdad;
    private javax.swing.JLabel labelEquipo;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelSexo;
    private java.awt.TextField txtApellidos;
    private java.awt.TextField txtDorsal;
    private javax.swing.JTextField txtEdad;
    private java.awt.TextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
